import{_ as e,o as t,c as o,e as i}from"./app-8a2f83c8.js";const c={},n=i('<h1 id="conceptual-overview" tabindex="-1"><a class="header-anchor" href="#conceptual-overview" aria-hidden="true">#</a> Conceptual Overview</h1><p>ZeroAuth for Web ships and encourages two ways to initiate a zkLogin flow on Web supporting both Single Page Applications (SPAs) and Multi Page Applications (MPAs):</p><ul><li><strong>Functional style</strong>: This approach offers a top-level function requiring at least a <code>ZKLoginRequest</code> instance as input.</li><li><strong>Object-oriented style</strong>: ZeroAuth provides a default implementation of <code>ZKLoginService</code>. This encapsulates the zkLogin initiation process.</li></ul><p>In any of the aforementioned approaches, there exists a <strong>callable</strong>, <code>zkLogin</code>, which requires at minimum a <code>ZKLoginRequest</code> object. The <code>ZKLoginRequest</code> object, as its name implies, encapsulates a zkLogin request. It facilitates the configuration of an <strong>OAuth provider</strong>. Once the <code>ZKLoginRequest</code> object is configured, it is passed to the <code>zkLogin</code> callable which builds the <code>AuthorizationRequest</code> object and triggers the OAuth flow. At this point, the user is redirected to the OAuth provider&#39;s login page. Once the user has successfully logged in, the OAuth provider redirects the user back to the <code>redirect_uri</code>. On the redirect page, a special <code>continueWithZKLogin</code> function is called which extracts the <code>token</code> from the URL and then makes subsequent calls to salting and proving services. From here, the results are relayed back via a <code>ZKLoginListener</code> object.</p>',4),s=[n];function a(r,d){return t(),o("div",null,s)}const h=e(c,[["render",a],["__file","conceptual-overview.html.vue"]]);export{h as default};
