import{_ as e,o as t,c as o,e as i}from"./app-8a2f83c8.js";const r={},s=i('<h1 id="conceptual-overview" tabindex="-1"><a class="header-anchor" href="#conceptual-overview" aria-hidden="true">#</a> Conceptual Overview</h1><p>The following steps are involved:</p><ol><li><p><strong>Injection</strong> - This is the process of injecting a <code>ZKLoginRequest</code> object into the <code>zkLogin</code> callable.</p></li><li><p><strong>OAuth flow</strong> - This is the process of redirecting the user to the OAuth provider&#39;s login page. Once the user has successfully logged in, the OAuth provider redirects the user back to the <code>redirect_uri</code> you specified in the zkLogin request object.</p><blockquote><p><strong>Note:</strong> The <code>redirect_uri</code> is a special URI that is used to redirect the user back to your application. ZeroAuth spawns a local web server to listen for the redirect. This web server is automatically shut down once the redirect is handled.</p></blockquote></li><li><p><strong>Salting</strong> - This is the process of generating a salt request. This is done by calling the salting service with the <code>token</code> received from the OAuth provider.</p></li><li><p><strong>Proving</strong> - This is the process of generating a proof request. This is done by calling the proving service with the <code>token</code> and <code>salt</code> received from the salting service.</p></li><li><p><strong>Relaying results</strong> - The results of the salting and proving services are relayed back to the caller via a <code>ZKLoginListener</code> object.</p></li></ol>',3),c=[s];function n(a,l){return t(),o("div",null,c)}const d=e(r,[["render",n],["__file","conceptual-overview.html.vue"]]);export{d as default};
