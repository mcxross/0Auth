/*
 * Copyright 2016 McXross. All Rights Reserved.
 *
 *Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
package xyz.mcxross.zero.model

import com.eygraber.uri.Uri
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import xyz.mcxross.zero.util.getQueryParameterAsLong

@Serializable
data class AuthorizationResponse(

  /** The authorization request associated with this response. */
  @SerialName("request") val request: AuthorizationRequest,

  /**
   * The returned state parameter, which must match the value specified in the request. AppAuth for
   * Android ensures that this is the case.
   */
  override val state: String? = null,

  /**
   * The type of the retrieved token. Typically, this is "Bearer" when present. Otherwise, another
   * token_type value that the Client has negotiated with the Authorization Server.
   *
   * @see "OpenID Connect Core 1.0, Section 3.2.2.5
   *
   * <https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.3.2.2.5>"
   */
  @SerialName("token_type") val tokenType: String? = null,

  /**
   * The authorization code generated by the authorization server. Set when the response_type
   * requested includes 'code'.
   */
  @SerialName("code") val authorizationCode: String? = null,
  /**
   * The access token retrieved as part of the authorization flow. This is available when the {@link
   * AuthorizationRequest#responseType response_type} of the request included 'token'.
   *
   * @see "OpenID Connect Core 1.0, Section 3.2.2.5
   *
   * <https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.3.2.2.5>"
   */
  @SerialName("access_token") val accessToken: String? = null,

  /**
   * The approximate expiration time of the access token, as milliseconds from the UNIX epoch. Set
   * when the requested {@link AuthorizationRequest#responseType response_type} included 'token'.
   *
   * @see "OpenID Connect Core 1.0, Section 3.2.2.5
   *
   * <https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.3.2.2.5>"
   */
  @SerialName("expires_at") val accessTokenExpirationTime: Long? = null,

  /**
   * The id token retrieved as part of the authorization flow. This is available when the {@link
   * AuthorizationRequest#responseType response_type} of the request included 'id_token'.
   *
   * @see "OpenID Connect Core 1.0, Section 2
   *
   * <https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.2>"
   *
   * @see "OpenID Connect Core 1.0, Section 3.2.2.5
   *
   * <https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.3.2.2.5>"
   */
  @SerialName("id_token") val idToken: String? = null,

  /**
   * The scope of the returned access token. If this is not specified, the scope is assumed to be
   * the same as what was originally requested.
   */
  @SerialName("scope") val scope: String? = null,

  /** The additional, non-standard parameters in the response. */
  @SerialName("additional_parameters") val additionalParameters: Map<String, String> = emptyMap(),
) : AuthorizationManagementResponse {
  companion object {

    /** The extra string used to store an [AuthorizationResponse] in an intent by [.toIntent]. */
    const val EXTRA_RESPONSE: String = "xyz.mcxross.zero.model.AuthorizationResponse"

    /**
     * Indicates that a provided access token is a bearer token.
     *
     * @see "The OAuth 2.0 Authorization Framework
     */
    const val TOKEN_TYPE_BEARER = "bearer"

    const val KEY_REQUEST = "request"

    const val KEY_ADDITIONAL_PARAMETERS = "additional_parameters"

    const val KEY_EXPIRES_AT = "expires_at"

    // TODO: rename all KEY_* below to PARAM_* - they are standard OAuth2 parameters

    const val KEY_STATE = "state"

    const val KEY_TOKEN_TYPE = "token_type"

    const val KEY_AUTHORIZATION_CODE = "code"

    const val KEY_ACCESS_TOKEN = "access_token"

    const val KEY_EXPIRES_IN = "expires_in"

    const val KEY_ID_TOKEN = "id_token"

    const val KEY_SCOPE = "scope"

    private val BUILT_IN_PARAMS: Set<String> =
      setOf(
        KEY_TOKEN_TYPE,
        KEY_STATE,
        KEY_AUTHORIZATION_CODE,
        KEY_ACCESS_TOKEN,
        KEY_EXPIRES_IN,
        KEY_ID_TOKEN,
        KEY_SCOPE
      )

    fun fromUri(uri: Uri, request: AuthorizationRequest): AuthorizationResponse =
      AuthorizationResponse(
        request = request,
        tokenType = uri.getQueryParameter(KEY_TOKEN_TYPE),
        authorizationCode = uri.getQueryParameter(KEY_AUTHORIZATION_CODE),
        accessToken = uri.getQueryParameter(KEY_ACCESS_TOKEN),
        accessTokenExpirationTime = uri.getQueryParameterAsLong(uri, KEY_EXPIRES_IN),
        idToken = uri.getQueryParameter(KEY_ID_TOKEN),
        scope = uri.getQueryParameter(KEY_SCOPE),
      )
  }
}
